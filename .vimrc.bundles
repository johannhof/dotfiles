" Basics
    set nocompatible        " Must be first line
    set background=dark     " Assume a dark background

    " The next three lines ensure that the ~/.vim/bundle/ system works
    filetype off
    set rtp+=~/.vim/bundle/vundle
    call vundle#rc()

" Bundles

" Deps
    Bundle 'gmarik/vundle'
    Bundle 'MarcWeber/vim-addon-mw-utils'
    Bundle 'tomtom/tlib_vim'

" General

    " NerdTree
    Bundle 'scrooloose/nerdtree'
        " auto start nerdtree
        autocmd vimenter * if !argc() | NERDTree | endif

        map <C-e> :NERDTreeToggle<CR>:NERDTreeMirror<CR>

        let NERDTreeShowBookmarks=0
        let NERDTreeIgnore=['\.pyc', '\~$', '\.swo$', '\.swp$', '\.DS_Store']
        let NERDTreeChDirMode=2
        let NERDChristmasTree = 1
        let NERDTreeQuitOnOpen=0
        let NERDTreeMouseMode=2
        let NERDTreeShowHidden=0
        let NERDTreeShowLineNumbers=0
        let NERDTreeKeepTreeInNewTab=1
        let g:nerdtree_tabs_open_on_gui_startup=0

    " UndoTree
    Bundle 'mbbill/undotree'
        nnoremap <Leader>u :UndotreeToggle<CR>
        " If undotree is opened, it is likely one wants to interact with it.
        let g:undotree_SetFocusWhenToggle=1

    " vim-airline
    Bundle 'bling/vim-airline'
        if !exists('g:airline_symbols')
            let g:airline_symbols = {}
        endif

        let g:airline_powerline_fonts=1

        " old vim-powerline symbols
        let g:airline_left_sep = '⮀'
        let g:airline_left_alt_sep = '⮁'
        let g:airline_right_sep = '⮂'
        let g:airline_right_alt_sep = '⮃'
        let g:airline_symbols.branch = '⭠'
        let g:airline_symbols.readonly = '⭤'
        let g:airline_symbols.linenr = '⭡'

    " Autoformat
    Plugin 'Chiel92/vim-autoformat'
      nmap <Leader>f :Autoformat<CR>

    " gitgutter
    Bundle 'airblade/vim-gitgutter'
        " https://github.com/airblade/vim-gitgutter/issues/106
        "let g:gitgutter_realtime = 0

    " useful for working with marks
    Bundle "kshenoy/vim-signature"

    " indent guides
    Bundle 'nathanaelkane/vim-indent-guides'
        "let g:indent_guides_auto_colors = 1
        let g:indent_guides_auto_colors = 0
        autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=235
        autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=237
        let g:indent_guides_start_level = 2
        let g:indent_guides_guide_size = 1
        let g:indent_guides_enable_on_vim_startup = 1

    " AutoCloseTag
    Bundle 'spf13/vim-autoclose'
        " Make it so AutoCloseTag works for xml and xhtml files as well
        au FileType xhtml,xml ru ftplugin/html/autoclosetag.vim
        nmap <Leader>ac <Plug>ToggleAutoCloseMappings

    " ag support
    Bundle 'mileszs/ack.vim'
        let g:ackprg = 'ag --nogroup --nocolor --column --smart-case'
        nmap <leader>ag :Ack! 

    Bundle 'altercation/vim-colors-solarized'
    Bundle 'spf13/vim-colors'
    Bundle 'tpope/vim-surround'
    Bundle 'terryma/vim-multiple-cursors'
    Bundle 'matchit.zip'

    Bundle 'Lokaltog/vim-easymotion'
    Bundle 'vim-scripts/camelcasemotion'
    Bundle 'godlygeek/csapprox'
    Bundle 'jistr/vim-nerdtree-tabs'
    Bundle 'flazz/vim-colorschemes'
    Bundle 'myusuf3/numbers.vim'
    Bundle 'vim-scripts/restore_view.vim'
    Bundle 'tpope/vim-abolish.git'
    Bundle 'xolox/vim-misc'
    Bundle 'xolox/vim-colorscheme-switcher'

    " Syntastic
    Bundle 'scrooloose/syntastic'
        let g:syntastic_aggregate_errors = 1

        " Coffeescript
        let g:syntastic_coffee_coffeelint_args="--csv --file ~/.lint/coffeelint.json"

        " JS
        let g:syntastic_html_checkers = []
        let g:syntastic_javascript_checkers = ['eslint']
        let g:syntastic_javascript_eslint_args = "-c ~/.lint/eslint.json"

        " C++
        let g:syntastic_cpp_compiler = 'clang++'

        " Go
        let g:syntastic_go_checkers = ['go', 'golint']

    " Fugitive
    Bundle 'tpope/vim-fugitive'

    " Tabularize
    Bundle 'godlygeek/tabular'
        nmap <Leader>a& :Tabularize /&<CR>
        vmap <Leader>a& :Tabularize /&<CR>
        nmap <Leader>a= :Tabularize /=<CR>
        vmap <Leader>a= :Tabularize /=<CR>
        nmap <Leader>a: :Tabularize /:<CR>
        vmap <Leader>a: :Tabularize /:<CR>
        nmap <Leader>a:: :Tabularize /:\zs<CR>
        vmap <Leader>a:: :Tabularize /:\zs<CR>
        nmap <Leader>a, :Tabularize /,<CR>
        vmap <Leader>a, :Tabularize /,<CR>
        nmap <Leader>a<Bar> :Tabularize /<Bar><CR>
        vmap <Leader>a<Bar> :Tabularize /<Bar><CR>

    Bundle 'mattn/webapi-vim'
    Bundle 'scrooloose/nerdcommenter'

" Snippets & AutoComplete

    Bundle 'Shougo/neosnippet'
        " Disable the neosnippet preview candidate window
        " When enabled, there can be too much visual noise
        " especially when splits are used.
        set completeopt-=preview

        " only use my selected snippets
        " (bad snippets ruin the experience)
        let g:neosnippet#snippets_directory='~/.snippets/'
        let g:neosnippet#disable_runtime_snippets = { '_' : 1 }

        " enable snippet usage in visual mode (really cool)
        vmap <Leader>s <Plug>(neosnippet_expand_target)

        " SuperTab like snippets behavior.
        imap <silent><expr><TAB> neosnippet#expandable() ?
                    \ "\<Plug>(neosnippet_expand_or_jump)" : (pumvisible() ?
                    \ "\<C-e>" : "\<TAB>")
        smap <TAB> <Right><Plug>(neosnippet_jump_or_expand)

    " neocomplcache
    Bundle 'Shougo/neocomplcache'
        let g:acp_enableAtStartup = 0
        let g:neocomplcache_enable_at_startup = 1
        let g:neocomplcache_enable_camel_case_completion = 1
        let g:neocomplcache_enable_smart_case = 1
        let g:neocomplcache_enable_underbar_completion = 1
        let g:neocomplcache_enable_auto_delimiter = 1
        let g:neocomplcache_max_list = 15
        let g:neocomplcache_force_overwrite_completefunc = 1

        " Define dictionary.
        let g:neocomplcache_dictionary_filetype_lists = {
                    \ 'default' : '',
                    \ 'vimshell' : $HOME.'/.vimshell_hist',
                    \ 'scheme' : $HOME.'/.gosh_completions'
                    \ }

        " Define keyword.
        if !exists('g:neocomplcache_keyword_patterns')
            let g:neocomplcache_keyword_patterns = {}
        endif
        let g:neocomplcache_keyword_patterns._ = '\h\w*'

        " Plugin key-mappings {
            " These two lines conflict with the default digraph mapping of <C-K>
            imap <C-k> <Plug>(neosnippet_expand_or_jump)
            smap <C-k> <Plug>(neosnippet_expand_or_jump)

            inoremap <expr><C-g> neocomplcache#undo_completion()
            inoremap <expr><C-l> neocomplcache#complete_common_string()
            inoremap <expr><CR> neocomplcache#complete_common_string()

            " <TAB>: completion.
            inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
            inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<TAB>"

            " <CR>: close popup
            " <s-CR>: close popup and save indent.
            inoremap <expr><s-CR> pumvisible() ? neocomplcache#close_popup()"\<CR>" : "\<CR>"
            inoremap <expr><CR> pumvisible() ? neocomplcache#close_popup() : "\<CR>"

            " <C-h>, <BS>: close popup and delete backword char.
            inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
            inoremap <expr><C-y> neocomplcache#close_popup()
        " }

        " Enable omni completion.
        autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
        autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
        autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
        autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
        autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
        autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
        autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc

        " Enable heavy omni completion.
        if !exists('g:neocomplcache_omni_patterns')
            let g:neocomplcache_omni_patterns = {}
        endif
        let g:neocomplcache_omni_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
        let g:neocomplcache_omni_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
        let g:neocomplcache_omni_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
        let g:neocomplcache_omni_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
        let g:neocomplcache_omni_patterns.ruby = '[^. *\t]\.\h\w*\|\h\w*::'

        " For snippet_complete marker.
        if has('conceal')
            set conceallevel=2 concealcursor=i
        endif


" Programming Languages

    " Javascript
        Bundle 'elzr/vim-json'
        Bundle 'pangloss/vim-javascript'
        Bundle 'kchmck/vim-coffee-script'

    " CSS
        Bundle 'hail2u/vim-css3-syntax'
        Bundle 'gorodinskiy/vim-coloresque'
        Bundle 'groenewege/vim-less'
        Bundle 'wavded/vim-stylus'

    " Markup
        Bundle 'amirh/HTML-AutoCloseTag'
        Bundle 'tpope/vim-haml'
        Bundle 'tpope/vim-markdown'
        Bundle 'digitaltoad/vim-jade'
        Bundle 'cespare/vim-toml'

    " Erlang
        Bundle 'jimenezrick/vimerl'

    " Elixir
        Bundle 'elixir-lang/vim-elixir'

    " Clojure
        Bundle 'vim-scripts/paredit.vim'

    " Rust
        Bundle 'wting/rust.vim'

    " Dart
        Bundle 'dart-lang/dart-vim-plugin'

    " F#
        Bundle 'kongo2002/fsharp-vim'

    " Julia
        Bundle 'JuliaLang/julia-vim'

    " Go
       Bundle 'fatih/vim-go'
       " disable fmt on save
       let g:go_fmt_autosave = 0
       let g:go_fmt_fail_silently = 1

